---
alwaysApply: true
---
# Rules for Eco Academia Project

## General Project Guidelines

- The project is the **Eco Academia Admin Panel**, a web-based management system for the *Eco Academia* interactive learning game. It is built with **HTML, CSS, and JavaScript**.
- The primary backend service is **Firebase** for authentication, real-time database, and hosting.
- All pages must be **responsive** and functional on both desktop and mobile devices.
- Adhere to a clean, modern, and intuitive UI/UX design.

## UI/UX Consistency

- When creating new UI elements, first check for existing CSS classes and components to reuse.
- Ensure that modals, buttons, and form elements follow a consistent design pattern across all pages.

## Task Management and Documentation

1.  **Check Task Status:** Before starting any new task, I *MUST* check the following files to understand the current progress:
    - `project-task-docs/main-task-list.mdc`: For the overall status of all project tasks.
    - `task-completion-logs/` directory: To review logs for previously completed tasks.

2.  **Update Task Documentation:** Upon completing any task, I *MUST* perform the following documentation updates:
    - Update the status of the corresponding task in `project-task-docs/main-task-list.mdc`.
    - Create a new, descriptively named markdown file in `task-completion-logs/` detailing the work done (task description, date, summary, code snippets, challenges).

3.  **Task Logging Requirement:** For EVERY task I work on, I *MUST* create a detailed log entry in the `task-completion-logs/` directory. Each log should include:
    - **Task ID/Name:** A unique identifier for the task
    - **Date and Time:** When the task was completed
    - **Task Description:** What was requested and accomplished
    - **Files Modified:** List of all files that were created, modified, or deleted
    - **Code Changes Summary:** Brief description of the main changes made
    - **Challenges Encountered:** Any issues faced and how they were resolved
    - **Testing Notes:** What was tested and any issues found
    - **Next Steps:** Any follow-up work or recommendations

4.  **Reference Project Documentation:**
    - For high-level project scope, tech stack, or architecture, I *MUST* refer to `project-task-docs/project-overview.mdc`.
    - For detailed features, user roles, and user flow, I *MUST* refer to `project-task-docs/taskflow-prd.mdc`.

## Code Quality and Best Practices

1.  **Clean Code:** I will write clean, readable, maintainable, and efficient code. This includes:
    - Using meaningful and consistent naming conventions for files, variables, functions, CSS classes, and IDs.
    - Keeping functions small and focused on a single responsibility.
    - Commenting on complex logic where necessary.

2.  **Git Commits:** Commit messages should follow a consistent format, such as Conventional Commits (e.g., `feat: add user login functionality`, `fix: correct quiz scoring bug`, `docs: update PRD with new feature`).

3.  **File Structure:**
    - Organize files into logical folders (e.g., `css/`, `js/`, `images/`).
    - **Do not use inline CSS (`style` attributes).** All styles must be in the appropriate `.css` file in the `css/` folder.
    - **Do not use inline JavaScript (`<script>` tags in HTML body).** All scripts must be in the appropriate `.js` file in the `js/` folder.

4.  **Security and Configuration:**
    - Sensitive information such as Firebase API keys and configuration details *MUST NOT* be hardcoded directly into shared scripts if possible. When applicable, use environment variables and ensure configuration files with sensitive data are listed in `.gitignore`. For this project, configuration is in `admin/js/firebase-config.js`.

5.  **Firebase Data Models:** All data stored in Firebase must adhere to predefined structures. For example, all user profiles should be stored in the `users` collection and contain `name`, `email`, `status`, and `createdAt` fields.

6.  **JavaScript:**
    - Use vanilla JavaScript. Do not introduce frameworks like React, Vue, or Angular.
    - Organize scripts by page or feature for modularity.
    - Implement robust error handling for asynchronous operations like Firebase calls.

## Page-Specific Guidelines

- **Login:** Simulate login with JavaScript and Firebase Authentication. Redirect to the dashboard on success.
- **Dashboard:** Provide an overview of key metrics using static data or data from Firebase.
- **Users (Student Tracking):** List users/players, allow client-side filtering/searching, and show details.
- **Quiz Manager:** List quizzes, allow add/edit/delete operations. Data is static or managed via Firebase.
- **Scores:** Display user rankings and scores. Allow sorting and filtering.
- **Admin Profile:** Allow profile updates, with changes not persisting beyond the session unless connected to Firebase.

## Quality Assurance

- **Manual Testing:** Before marking a feature as complete, test it on the latest versions of Chrome and Firefox. Check for console errors and ensure the UI is responsive on both mobile and desktop viewport sizes.

## Tool Usage

1.  **File Edits:** I will use the `edit_file` tool to make changes to files. I will not print out code blocks with file changes unless specifically asked.
2.  **Terminal Commands:** I will use the `run_terminal_cmd` tool to execute terminal commands.
3.  **Pathing:** I will use workspace-relative paths when referring to files or directories (e.g., `admin/css/dashboard.css`).

## Communication

1.  **Clarification:** If a request is ambiguous, I will ask for clarification before proceeding.
2.  **Conciseness:** I will keep my answers concise and to the point.
